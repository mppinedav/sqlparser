// $ANTLR 2.7.7 (2006-11-01): "src/parser/parser.g" -> "P.java"$

package parser;

public interface PTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int SELECT_STATEMENT = 4;
	int GROUP_BY = 5;
	int ORDER_BY = 6;
	int ALIAS_EQU = 7;
	int FUNCTION = 8;
	int LOGIC_OP = 9;
	int ALL_FIELDS = 10;
	int COLUMN = 11;
	int WHERE = 12;
	int SEMI = 13;
	int LITERAL_t_union = 14;
	// "\u8868\u5408\u5e76" = 15
	int COMMA = 16;
	int LITERAL_t_compare = 17;
	// "\u8868\u6bd4\u8f83" = 18
	int LITERAL_where = 19;
	// "\u6761\u4ef6" = 20
	int LITERAL_select = 21;
	// "\u67e5\u8be2" = 22
	int LITERAL_distinct = 23;
	// "\u552f\u4e00" = 24
	int LITERAL_from = 25;
	// "\u6765\u81ea" = 26
	int LITERAL_group = 27;
	int LITERAL_by = 28;
	// "\u5206\u7ec4" = 29
	int LITERAL_order = 30;
	// "\u6392\u5e8f" = 31
	int LITERAL_as = 32;
	// "\u4f5c\u4e3a" = 33
	// "=" = 34
	// "\u7b49\u4e8e" = 35
	// "\u6240\u6709" = 36
	int STAR = 37;
	// "\u5347\u5e8f" = 38
	// "\u964d\u5e8f" = 39
	int LITERAL_asc = 40;
	int LITERAL_desc = 41;
	int LPAREN = 42;
	int RPAREN = 43;
	int LITERAL_is = 44;
	int LITERAL_null = 45;
	int LITERAL_not = 46;
	// "\u4e3a\u7a7a" = 47
	// "\u975e\u7a7a" = 48
	int LITERAL_between = 49;
	// "\u8303\u56f4" = 50
	int LITERAL_and = 51;
	int PARAM_ID = 52;
	int ID = 53;
	int QUOTED_STRING = 54;
	int POINT = 55;
	int REAL_NUM = 56;
	int LITERAL_all = 57;
	// "\u5168\u90e8" = 58
	int LITERAL_sqrt = 59;
	// "\u6c42\u5e73\u65b9\u6839" = 60
	int LITERAL_getdate = 61;
	// "\u6c42\u5f53\u524d\u65e5\u671f\u65f6\u95f4" = 62
	int LITERAL_abs = 63;
	// "\u6c42\u7edd\u5bf9\u503c" = 64
	int LITERAL_substring = 65;
	// "\u5b57\u7b26\u4e32\u622a\u53d6" = 66
	int LITERAL_round = 67;
	// "\u683c\u5f0f\u5316\u6570\u503c" = 68
	int LITERAL_right = 69;
	// "\u5b57\u7b26\u4e32\u53f3\u622a" = 70
	int LITERAL_ltrim = 71;
	// "\u53bb\u6389\u5de6\u7a7a\u683c" = 72
	int LITERAL_rtrim = 73;
	// "\u53bb\u6389\u53f3\u7a7a\u683c" = 74
	int LITERAL_char_length = 75;
	// "\u6c42\u5b57\u7b26\u4e32\u7684\u957f\u5ea6" = 76
	int LITERAL_floor = 77;
	// "\u6c42\u56db\u820d\u540e\u7684\u6574\u6570" = 78
	int LITERAL_ceiling = 79;
	// "\u6c42\u4e94\u5165\u540e\u7684\u6574\u6570" = 80
	int LITERAL_lower = 81;
	// "\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u5c0f\u5199" = 82
	int LITERAL_charindex = 83;
	// "\u5b58\u5728\u4e8e" = 84
	int LITERAL_str = 85;
	// "\u6570\u503c\u8f6c\u5b57\u7b26\u4e32" = 86
	int LITERAL_sum = 87;
	// "\u6c42\u548c" = 88
	int LITERAL_avg = 89;
	// "\u6c42\u5e73\u5747\u6570" = 90
	int LITERAL_max = 91;
	// "\u6c42\u6700\u5927\u503c" = 92
	int LITERAL_min = 93;
	// "\u6c42\u6700\u5c0f\u503c" = 94
	int LITERAL_count = 95;
	// "\u6c42\u8bb0\u5f55\u6570" = 96
	int ONE_ARG_OP = 97;
	// "\u975e" = 98
	int TWO_ARG_OP = 99;
	// "\u4e0e" = 100
	// "\u6216" = 101
	// "\u5f02\u6216" = 102
	// "\u52a0" = 103
	// "\u51cf" = 104
	// "\u4e58" = 105
	// "\u9664" = 106
	// "\u6c42\u6a21" = 107
	int COMPARE_OP = 108;
	int LITERAL_like = 109;
	// "\u5927\u4e8e\u7b49\u4e8e" = 110
	// "\u5c0f\u4e8e\u7b49\u4e8e" = 111
	// "\u5927\u4e8e" = 112
	// "\u5c0f\u4e8e" = 113
	// "\u4e0d\u7b49\u4e8e" = 114
	// "\u5305\u542b" = 115
	// "\u4e0d\u5305\u542b" = 116
	int LITERAL_or = 117;
	// "\u5e76\u4e14" = 118
	// "\u6216\u8005" = 119
	// "not exist" = 120
	// "\u4e0d\u5b58\u5728" = 121
	int LITERAL_exist = 122;
	// "\u5b58\u5728" = 123
	int NOT_EXIST = 124;
	int EXIST = 125;
	int PARAM_LPAREN = 126;
	int PARAM_RPAREN = 127;
	int WS = 128;
	int ESC = 129;
	int ID_START_LETTER = 130;
	int ID_LETTER = 131;
	int NUM = 132;
	int DOT_NUM = 133;
	int NUM_START = 134;
	int NUM_LETTER = 135;
	int ML_COMMENT = 136;
}
