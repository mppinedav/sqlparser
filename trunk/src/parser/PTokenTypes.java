// $ANTLR 2.7.7 (2006-11-01): "src/parser/parser.g" -> "P.java"$

package parser;

public interface PTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int SELECT_STATEMENT = 4;
	int SUBQUERY = 5;
	int GROUP_BY = 6;
	int ORDER_BY = 7;
	int ALIAS_EQU = 8;
	int FUNCTION = 9;
	int LOGIC_OP = 10;
	int CONTAIN_OP = 11;
	int SUBCONTAIN_OP = 12;
	int ALL_FIELDS = 13;
	int COLUMN = 14;
	int WHERE = 15;
	int SEMI = 16;
	int LITERAL_t_union = 17;
	// "\u8868\u5408\u5e76" = 18
	int COMMA = 19;
	int LITERAL_t_compare = 20;
	// "\u8868\u6bd4\u8f83" = 21
	int LITERAL_where = 22;
	// "\u6761\u4ef6" = 23
	int LITERAL_select = 24;
	// "\u67e5\u8be2" = 25
	int LITERAL_distinct = 26;
	// "\u552f\u4e00" = 27
	int LITERAL_from = 28;
	// "\u6765\u81ea" = 29
	int LITERAL_group = 30;
	int LITERAL_by = 31;
	// "\u5206\u7ec4" = 32
	int LITERAL_order = 33;
	// "\u6392\u5e8f" = 34
	int LITERAL_as = 35;
	// "\u4f5c\u4e3a" = 36
	// "=" = 37
	// "\u7b49\u4e8e" = 38
	// "\u6240\u6709" = 39
	int STAR = 40;
	// "\u5347\u5e8f" = 41
	// "\u964d\u5e8f" = 42
	int LITERAL_asc = 43;
	int LITERAL_desc = 44;
	int LPAREN = 45;
	int RPAREN = 46;
	int LITERAL_is = 47;
	int LITERAL_null = 48;
	int LITERAL_not = 49;
	// "\u4e3a\u7a7a" = 50
	// "\u975e\u7a7a" = 51
	int LITERAL_between = 52;
	// "\u8303\u56f4" = 53
	int LITERAL_and = 54;
	// "not in" = 55
	int LITERAL_in = 56;
	// "\u5728\u4e8e" = 57
	// "\u4e0d\u5728\u4e8e" = 58
	int PARAM_ID = 59;
	int ID = 60;
	int QUOTED_STRING = 61;
	int POINT = 62;
	int REAL_NUM = 63;
	int NEGATIVE_DIGIT_ELEMENT = 64;
	int LITERAL_all = 65;
	// "\u5168\u90e8" = 66
	int LITERAL_sqrt = 67;
	// "\u6c42\u5e73\u65b9\u6839" = 68
	int LITERAL_getdate = 69;
	// "\u6c42\u5f53\u524d\u65e5\u671f\u65f6\u95f4" = 70
	int LITERAL_abs = 71;
	// "\u6c42\u7edd\u5bf9\u503c" = 72
	int LITERAL_substring = 73;
	// "\u5b57\u7b26\u4e32\u622a\u53d6" = 74
	int LITERAL_round = 75;
	// "\u683c\u5f0f\u5316\u6570\u503c" = 76
	int LITERAL_right = 77;
	// "\u5b57\u7b26\u4e32\u53f3\u622a" = 78
	int LITERAL_ltrim = 79;
	// "\u53bb\u6389\u5de6\u7a7a\u683c" = 80
	int LITERAL_rtrim = 81;
	// "\u53bb\u6389\u53f3\u7a7a\u683c" = 82
	int LITERAL_char_length = 83;
	// "\u6c42\u5b57\u7b26\u4e32\u7684\u957f\u5ea6" = 84
	int LITERAL_floor = 85;
	// "\u6c42\u56db\u820d\u540e\u7684\u6574\u6570" = 86
	int LITERAL_ceiling = 87;
	// "\u6c42\u4e94\u5165\u540e\u7684\u6574\u6570" = 88
	int LITERAL_lower = 89;
	// "\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u5c0f\u5199" = 90
	int LITERAL_charindex = 91;
	// "\u5b58\u5728\u4e8e" = 92
	int LITERAL_str = 93;
	// "\u6570\u503c\u8f6c\u5b57\u7b26\u4e32" = 94
	int LITERAL_sum = 95;
	// "\u6c42\u548c" = 96
	int LITERAL_avg = 97;
	// "\u6c42\u5e73\u5747\u6570" = 98
	int LITERAL_max = 99;
	// "\u6c42\u6700\u5927\u503c" = 100
	int LITERAL_min = 101;
	// "\u6c42\u6700\u5c0f\u503c" = 102
	int LITERAL_count = 103;
	// "\u6c42\u8bb0\u5f55\u6570" = 104
	int ONE_ARG_OP = 105;
	// "\u975e" = 106
	int TWO_ARG_OP = 107;
	int MINUS = 108;
	// "\u4e0e" = 109
	// "\u6216" = 110
	// "\u5f02\u6216" = 111
	// "\u52a0" = 112
	// "\u51cf" = 113
	// "\u4e58" = 114
	// "\u9664" = 115
	// "\u6c42\u6a21" = 116
	int COMPARE_OP = 117;
	int LITERAL_like = 118;
	// "\u5927\u4e8e\u7b49\u4e8e" = 119
	// "\u5c0f\u4e8e\u7b49\u4e8e" = 120
	// "\u5927\u4e8e" = 121
	// "\u5c0f\u4e8e" = 122
	// "\u4e0d\u7b49\u4e8e" = 123
	// "\u5305\u542b" = 124
	// "\u4e0d\u5305\u542b" = 125
	int LITERAL_or = 126;
	// "\u5e76\u4e14" = 127
	// "\u6216\u8005" = 128
	// "not exists" = 129
	// "\u4e0d\u5b58\u5728" = 130
	int LITERAL_exists = 131;
	// "\u5b58\u5728" = 132
	int NOT_EXIST = 133;
	int EXIST = 134;
	int PARAM_LPAREN = 135;
	int PARAM_RPAREN = 136;
	int WS = 137;
	int ESC = 138;
	int ID_START_LETTER = 139;
	int ID_LETTER = 140;
	int NUM = 141;
	int DOT_NUM = 142;
	int NUM_START = 143;
	int NUM_LETTER = 144;
	int ML_COMMENT = 145;
}
