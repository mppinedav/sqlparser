// $ANTLR 2.7.7 (2006-11-01): "src/parser/parser.g" -> "P.java"$

package parser;

public interface PTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int SELECT_STATEMENT = 4;
	int SUBQUERY = 5;
	int GROUP_BY = 6;
	int ORDER_BY = 7;
	int ALIAS_EQU = 8;
	int FUNCTION = 9;
	int LOGIC_OP = 10;
	int CONTAIN_OP = 11;
	int SUBCONTAIN_OP = 12;
	int ALL_FIELDS = 13;
	int LOGIC_BLOCK = 14;
	int COLUMN = 15;
	int WHERE = 16;
	int SEMI = 17;
	int LITERAL_t_union = 18;
	// "\u8868\u5408\u5e76" = 19
	int COMMA = 20;
	int LITERAL_t_compare = 21;
	// "\u8868\u6bd4\u8f83" = 22
	int LITERAL_where = 23;
	// "\u6761\u4ef6" = 24
	int LITERAL_select = 25;
	// "\u67e5\u8be2" = 26
	int LITERAL_distinct = 27;
	// "\u552f\u4e00" = 28
	int LITERAL_from = 29;
	// "\u6765\u81ea" = 30
	int LITERAL_group = 31;
	int LITERAL_by = 32;
	// "\u5206\u7ec4" = 33
	int LITERAL_order = 34;
	// "\u6392\u5e8f" = 35
	int LITERAL_not = 36;
	// "\u975e" = 37
	int LITERAL_and = 38;
	int LITERAL_or = 39;
	// "\u5e76\u4e14" = 40
	// "\u6216\u8005" = 41
	int LPAREN = 42;
	int RPAREN = 43;
	int LITERAL_as = 44;
	// "\u4f5c\u4e3a" = 45
	// "=" = 46
	// "\u7b49\u4e8e" = 47
	// "\u6240\u6709" = 48
	int STAR = 49;
	// "\u5347\u5e8f" = 50
	// "\u964d\u5e8f" = 51
	int LITERAL_asc = 52;
	int LITERAL_desc = 53;
	int LITERAL_is = 54;
	int LITERAL_null = 55;
	// "\u4e3a\u7a7a" = 56
	// "\u975e\u7a7a" = 57
	int LITERAL_between = 58;
	// "\u8303\u56f4" = 59
	// "not in" = 60
	int LITERAL_in = 61;
	// "\u5728\u4e8e" = 62
	// "\u4e0d\u5728\u4e8e" = 63
	int PARAM_ID = 64;
	int ID = 65;
	int QUOTED_STRING = 66;
	int POINT = 67;
	int REAL_NUM = 68;
	int NEGATIVE_DIGIT_ELEMENT = 69;
	int LITERAL_all = 70;
	// "\u5168\u90e8" = 71
	int LITERAL_sqrt = 72;
	// "\u6c42\u5e73\u65b9\u6839" = 73
	int LITERAL_getdate = 74;
	// "\u6c42\u5f53\u524d\u65e5\u671f\u65f6\u95f4" = 75
	int LITERAL_abs = 76;
	// "\u6c42\u7edd\u5bf9\u503c" = 77
	int LITERAL_substring = 78;
	// "\u5b57\u7b26\u4e32\u622a\u53d6" = 79
	int LITERAL_round = 80;
	// "\u683c\u5f0f\u5316\u6570\u503c" = 81
	int LITERAL_right = 82;
	// "\u5b57\u7b26\u4e32\u53f3\u622a" = 83
	int LITERAL_ltrim = 84;
	// "\u53bb\u6389\u5de6\u7a7a\u683c" = 85
	int LITERAL_rtrim = 86;
	// "\u53bb\u6389\u53f3\u7a7a\u683c" = 87
	int LITERAL_char_length = 88;
	// "\u6c42\u5b57\u7b26\u4e32\u7684\u957f\u5ea6" = 89
	int LITERAL_floor = 90;
	// "\u6c42\u56db\u820d\u540e\u7684\u6574\u6570" = 91
	int LITERAL_ceiling = 92;
	// "\u6c42\u4e94\u5165\u540e\u7684\u6574\u6570" = 93
	int LITERAL_lower = 94;
	// "\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u5c0f\u5199" = 95
	int LITERAL_charindex = 96;
	// "\u5b58\u5728\u4e8e" = 97
	int LITERAL_str = 98;
	// "\u6570\u503c\u8f6c\u5b57\u7b26\u4e32" = 99
	int LITERAL_sum = 100;
	// "\u6c42\u548c" = 101
	int LITERAL_avg = 102;
	// "\u6c42\u5e73\u5747\u6570" = 103
	int LITERAL_max = 104;
	// "\u6c42\u6700\u5927\u503c" = 105
	int LITERAL_min = 106;
	// "\u6c42\u6700\u5c0f\u503c" = 107
	int LITERAL_count = 108;
	// "\u6c42\u8bb0\u5f55\u6570" = 109
	int ONE_ARG_OP = 110;
	int TWO_ARG_OP = 111;
	int MINUS = 112;
	// "\u4e0e" = 113
	// "\u6216" = 114
	// "\u5f02\u6216" = 115
	// "\u52a0" = 116
	// "\u51cf" = 117
	// "\u4e58" = 118
	// "\u9664" = 119
	// "\u6c42\u6a21" = 120
	int COMPARE_OP = 121;
	int LITERAL_like = 122;
	// "\u5927\u4e8e\u7b49\u4e8e" = 123
	// "\u5c0f\u4e8e\u7b49\u4e8e" = 124
	// "\u5927\u4e8e" = 125
	// "\u5c0f\u4e8e" = 126
	// "\u4e0d\u7b49\u4e8e" = 127
	// "\u5305\u542b" = 128
	// "\u4e0d\u5305\u542b" = 129
	// "not exists" = 130
	// "\u4e0d\u5b58\u5728" = 131
	int LITERAL_exists = 132;
	// "\u5b58\u5728" = 133
	int NOT_EXIST = 134;
	int EXIST = 135;
	int PARAM_LPAREN = 136;
	int PARAM_RPAREN = 137;
	int WS = 138;
	int ESC = 139;
	int ID_START_LETTER = 140;
	int ID_LETTER = 141;
	int NUM = 142;
	int DOT_NUM = 143;
	int NUM_START = 144;
	int NUM_LETTER = 145;
	int ML_COMMENT = 146;
}
