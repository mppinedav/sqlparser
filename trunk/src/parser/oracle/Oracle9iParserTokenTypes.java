// $ANTLR 2.7.7 (2006-11-01): "src/parser/oracle/parser_oracle.g" -> "Oracle9iLexer.java"$

	package parser.oracle;

public interface Oracle9iParserTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int SELECT_STATEMENT = 4;
	int SEARCH_NOT_CONDITION = 5;
	int SUBQUERY = 6;
	int GROUP_BY = 7;
	int ORDER_BY = 8;
	int ALIAS_EQU = 9;
	int FUNCTION = 10;
	int FUNCTION_NOTHING = 11;
	int FUNCTION_EMPTY_PARAM = 12;
	int FUNCTION_STAR_PARAM = 13;
	int FUNCTION_STAR_COUNT = 14;
	int FUNCTION_DATA_TYPE = 15;
	int FUNCTION_AS_DATA_TYPE = 16;
	int LOGIC_OP = 17;
	int LOGICAL_NULL = 18;
	int LOGICAL_NOT_NULL = 19;
	int LOGICAL_IN = 20;
	int LOGICAL_NOT_IN = 21;
	int LOGICAL_LIKE = 22;
	int LOGICAL_NOT_LIKE = 23;
	int LOGICAL_EXISTS = 24;
	int LOGICAL_NOT_EXISTS = 25;
	int LOGICAL_BETWEEN = 26;
	int SUBCONTAIN_OP = 27;
	int ALL_FIELDS = 28;
	int PAREN_FIELD = 29;
	int PAREN_DATA_TYPE = 30;
	int PAREN_CHAR_DATA_TYPE = 31;
	int LOGIC_BLOCK = 32;
	int COLUMN = 33;
	int WHERE = 34;
	int SEMI = 35;
	int TABLE_UNION_EN = 36;
	int TABLE_UNION_CN = 37;
	int COMMA = 38;
	int TABLE_COMPARE_EN = 39;
	int TABLE_COMPARE_CN = 40;
	int WHERE_EN = 41;
	int WHERE_CN = 42;
	int EXISTS_EN = 43;
	int EXISTS_CN = 44;
	int NOT_EXISTS_CN = 45;
	int NOT_EN = 46;
	int SELECT_EN = 47;
	int SELECT_CN = 48;
	int DISTINCT_EN = 49;
	int DISTINCT_CN = 50;
	int FROM_EN = 51;
	int FROM_CN = 52;
	int GROUP_EN = 53;
	int BY_EN = 54;
	int GROUP_BY_CN = 55;
	int ORDER_EN = 56;
	int ORDER_BY_CN = 57;
	int NOT_CN = 58;
	int AND_EN = 59;
	int OR_EN = 60;
	int AND_CN = 61;
	int OR_CN = 62;
	int LPAREN = 63;
	int RPAREN = 64;
	int AS_EN = 65;
	int AS_CN = 66;
	// "=" = 67
	// "\u7b49\u4e8e" = 68
	int SELECT_ALL_CN = 69;
	int STAR = 70;
	int ASC_EN = 71;
	int ASC_CN = 72;
	int DESC_EN = 73;
	int DESC_CN = 74;
	int LIKE_EN = 75;
	int LIKE_CN = 76;
	int NOT_LIKE_CN = 77;
	int IS_EN = 78;
	int NULL_EN = 79;
	int NULL_CN = 80;
	int NOT_NULL_CN = 81;
	int BETWEEN_CN = 82;
	int BETWEEN_EN = 83;
	int IN_EN = 84;
	int IN_CN = 85;
	int NOT_IN_CN = 86;
	int COUNT_EN = 87;
	int COUNT_CN = 88;
	int ALL_EN = 89;
	int ALL_CN = 90;
	int DATA_TYPE_AS_CN = 91;
	int CHAR = 92;
	int DATA_TYPE_STRING = 93;
	int REAL_NUM = 94;
	int ID = 95;
	int PARAM_ID = 96;
	int QUOTED_STRING = 97;
	int POINT = 98;
	int NEGATIVE_DIGIT_ELEMENT = 99;
	int LITERAL_avg = 100;
	// "\u6c42\u5e73\u5747\u6570" = 101
	int LITERAL_max = 102;
	// "\u6c42\u6700\u5927\u503c" = 103
	int LITERAL_min = 104;
	// "\u6c42\u6700\u5c0f\u503c" = 105
	int LITERAL_stddev = 106;
	// "\u6c42\u6807\u51c6\u5dee" = 107
	int LITERAL_sum = 108;
	// "\u6c42\u603b\u548c" = 109
	int LITERAL_variance = 110;
	// "\u6c42\u534f\u65b9\u5dee" = 111
	int SYSDATE_EN = 112;
	int SYSDATE_CN = 113;
	int LITERAL_cast = 114;
	// "\u6570\u636e\u7c7b\u578b\u8f6c\u5316" = 115
	int LITERAL_abs = 116;
	// "\u53d6\u7edd\u5bf9\u503c" = 117
	int LITERAL_acos = 118;
	// "\u6c42\u53cd\u4f59\u5f26\u503c" = 119
	int LITERAL_asin = 120;
	// "\u6c42\u53cd\u6b63\u5f26\u503c" = 121
	int LITERAL_atan = 122;
	// "\u6c42\u53cd\u6b63\u5207\u503c" = 123
	// "atin2" = 124
	// "\u6c42\u4e8c\u4e2a\u6570\u7684\u53cd\u6b63\u5207\u503c" = 125
	int LITERAL_ceil = 126;
	// "\u53d6\u4e0a\u9650\u6574\u6570" = 127
	int LITERAL_cos = 128;
	// "\u6c42\u4f59\u5f26\u503c" = 129
	int LITERAL_cosh = 130;
	// "\u6c42\u4f59\u5207\u503c" = 131
	int LITERAL_exp = 132;
	// "\u6c42\u5e42\u503c" = 133
	int LITERAL_floor = 134;
	// "\u53d6\u4e0b\u9650\u6574\u6570" = 135
	int LITERAL_ln = 136;
	// "\u6c42\u81ea\u7136\u5bf9\u6570" = 137
	int LITERAL_log = 138;
	// "\u6c42\u5bf9\u6570" = 139
	int LITERAL_mod = 140;
	// "\u6c42\u6a21" = 141
	int LITERAL_power = 142;
	// "\u6c42\u5e42" = 143
	int LITERAL_round = 144;
	// "\u683c\u5f0f\u5316\u6570\u503c" = 145
	int LITERAL_sign = 146;
	// "\u6c42\u503c\u7684\u7b26\u53f7" = 147
	int LITERAL_sin = 148;
	// "\u6c42\u6b63\u5f26\u503c" = 149
	int LITERAL_sinh = 150;
	// "\u6c42\u53cc\u66f2\u6b63\u5f26\u503c" = 151
	int LITERAL_sqrt = 152;
	// "\u6c42\u5e73\u65b9\u6839" = 153
	int LITERAL_tan = 154;
	// "\u6c42\u6b63\u5207\u503c" = 155
	int LITERAL_tanh = 156;
	// "\u6c42\u53cc\u66f2\u6b63\u5207\u503c" = 157
	int LITERAL_trunc = 158;
	// "\u683c\u5f0f\u5316\u6570\u503c2" = 159
	int LITERAL_ascii = 160;
	// "\u6c42ASCII\u7801" = 161
	int LITERAL_asciistr = 162;
	// "\u6c42\u5b57\u7b26\u4e32ASCII\u7801" = 163
	int LITERAL_chr = 164;
	// "\u6c42\u7b49\u503c\u7684\u5b57\u7b26" = 165
	int LITERAL_cancat = 166;
	// "\u5b57\u7b26\u4e32\u8fde\u63a5" = 167
	int LITERAL_initcap = 168;
	// "\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u51991" = 169
	int LITERAL_instr = 170;
	// "\u6c42\u4e32\u4f4d\u7f6e" = 171
	int LITERAL_instrb = 172;
	// "\u5b57\u8282\u65b9\u5f0f\u6c42\u4e32\u4f4d\u7f6e" = 173
	int LITERAL_length = 174;
	// "\u6c42\u5b57\u7b26\u4e32\u957f\u5ea6" = 175
	int LITERAL_lengthb = 176;
	// "\u6c42\u5b57\u7b26\u4e32\u5b57\u8282\u6570" = 177
	int LITERAL_lower = 178;
	// "\u8f6c\u4e3a\u5c0f\u5199\u5b57\u6bcd1" = 179
	int LITERAL_ltrim = 180;
	// "\u53bb\u6389\u5de6\u7a7a\u683c" = 181
	int LITERAL_lpad = 182;
	// "\u5b57\u7b26\u4e32\u5de6\u8865" = 183
	int LITERAL_nls_initcap = 184;
	// "\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u51992" = 185
	int LITERAL_nls_lower = 186;
	// "\u8f6c\u4e3a\u5c0f\u5199\u5b57\u6bcd2" = 187
	int LITERAL_nlssort = 188;
	// "\u5b57\u7b26\u4e32\u6392\u5e8f" = 189
	int LITERAL_nls_upper = 190;
	// "\u8f6c\u4e3a\u5927\u5199\u5b57\u6bcd2" = 191
	int LITERAL_replace = 192;
	// "\u5b57\u7b26\u4e32\u66ff\u6362" = 193
	int LITERAL_rpad = 194;
	// "\u5b57\u7b26\u4e32\u53f3\u8865" = 195
	int LITERAL_rtrim = 196;
	// "\u53bb\u6389\u53f3\u7a7a\u683c" = 197
	int LITERAL_soundex = 198;
	// "\u6c42\u5b57\u7b26\u4e32\u58f0\u97f3\u503c" = 199
	int LITERAL_substr = 200;
	// "\u5b57\u7b26\u4e32\u622a\u53d6" = 201
	int LITERAL_trim = 202;
	// "\u53bb\u5de6\u53f3\u7a7a\u683c" = 203
	int LITERAL_ranslate = 204;
	// "\u5b57\u7b26\u4e32\u5168\u66ff\u6362" = 205
	int LITERAL_upper = 206;
	// "\u8f6c\u4e3a\u5927\u5199\u5b57\u6bcd1" = 207
	int LITERAL_add_months = 208;
	// "\u6708\u4efd\u8fd0\u7b97" = 209
	int LITERAL_last_day = 210;
	// "\u6c42\u65e5\u671f\u6700\u540e\u4e00\u5929" = 211
	int LITERAL_months_between = 212;
	// "\u6c42\u6708\u4efd\u5dee\u503c" = 213
	int LITERAL_new_time = 214;
	// "\u6c42\u5bf9\u5e94\u65f6\u533a\u7684\u65f6\u95f4" = 215
	int LITERAL_next_day = 216;
	// "\u6c42\u5177\u4f53\u661f\u671f\u7684\u65e5\u671f" = 217
	int LITERAL_bin_to_num = 218;
	// "\u4e8c\u8fdb\u5236\u8f6c\u4e3a\u6570\u503c" = 219
	int LITERAL_chartorowid = 220;
	// "\u5b57\u7b26\u4e32\u8f6c\u4e3a\u884c\u53f7" = 221
	int LITERAL_convert = 222;
	// "\u5b57\u7b26\u4e32\u8f6c\u5316" = 223
	int LITERAL_hextoraw = 224;
	// "\u5341\u516d\u8fdb\u5236\u8f6c\u4e3a\u4e8c\u8fdb\u5236" = 225
	int LITERAL_rawtohex = 226;
	// "\u4e8c\u8fdb\u5236\u8f6c\u4e3a\u5341\u516d\u8fdb\u5236" = 227
	int LITERAL_rowidtochar = 228;
	// "\u884c\u53f7\u8f6c\u6210\u5b57\u7b26\u4e32" = 229
	int LITERAL_to_char = 230;
	// "\u8f6c\u4e3a\u5b57\u7b26\u578b" = 231
	int LITERAL_to_date = 232;
	// "\u8f6c\u4e3a\u65e5\u671f\u578b" = 233
	int LITERAL_to_multi_byte = 234;
	// "\u8f6c\u4e3a\u591a\u5b57\u8282\u578b" = 235
	int LITERAL_to_number = 236;
	// "\u8f6c\u4e3a\u6570\u503c\u578b" = 237
	int LITERAL_to_single_byte = 238;
	// "\u8f6c\u4e3a\u5355\u5b57\u8282\u578b" = 239
	int LITERAL_uid = 240;
	// "\u6c42\u6807\u8bc6\u7f16\u53f7" = 241
	int LITERAL_user = 242;
	// "\u6c42\u5f53\u524d\u7528\u6237" = 243
	int LITERAL_userenv = 244;
	// "\u6c42\u5f53\u524d\u7528\u6237\u73af\u5883\u4fe1\u606f" = 245
	int LITERAL_vsize = 246;
	// "\u6c42\u5b57\u6bb5\u5927\u5c0f" = 247
	int LITERAL_decode = 248;
	// "\u6c42\u6bd4\u8f83\u7ed3\u679c" = 249
	int LITERAL_dump = 250;
	// "\u8fd4\u56de\u6570\u636e\u683c\u5f0f" = 251
	int LITERAL_empty_blob = 252;
	// "\u521d\u59cb\u5316BLOB" = 253
	int LITERAL_empty_clob = 254;
	// "\u521d\u59cb\u5316CLOB" = 255
	int LITERAL_greatest = 256;
	// "\u6c42\u6700\u5927\u8868\u8fbe\u5f0f" = 257
	int LITERAL_least = 258;
	// "\u6c42\u6700\u5c0f\u8868\u8fbe\u5f0f" = 259
	int LITERAL_nvl = 260;
	// "\u6c42\u975e\u7a7a\u503c" = 261
	int TILDE = 262;
	// "\u975e\u8fd0\u7b97" = 263
	// "\u4e0e" = 264
	// "\u6216" = 265
	// "\u5f02\u6216" = 266
	// "\u52a0" = 267
	// "\u51cf" = 268
	// "\u4e58" = 269
	// "\u9664" = 270
	int PLUS = 271;
	int MINUS = 272;
	int DIVIDE = 273;
	int MOD = 274;
	int AMPERSAND = 275;
	int BITWISEOR = 276;
	int BITWISEXOR = 277;
	int ASSIGNEQUAL = 278;
	// "\u5927\u4e8e\u7b49\u4e8e" = 279
	// "\u5c0f\u4e8e\u7b49\u4e8e" = 280
	// "\u5927\u4e8e" = 281
	// "\u5c0f\u4e8e" = 282
	// "\u4e0d\u7b49\u4e8e" = 283
	int NOTEQUAL1 = 284;
	int NOTEQUAL2 = 285;
	int LESSTHANOREQUALTO1 = 286;
	int LESSTHANOREQUALTO2 = 287;
	int LESSTHAN = 288;
	int GREATERTHANOREQUALTO1 = 289;
	int GREATERTHANOREQUALTO2 = 290;
	int GREATERTHAN = 291;
	int LITERAL_year = 292;
	int LITERAL_yy = 293;
	int LITERAL_yyyy = 294;
	int LITERAL_month = 295;
	int LITERAL_mm = 296;
	int LITERAL_m = 297;
	int LITERAL_day = 298;
	int LITERAL_dd = 299;
	int LITERAL_d = 300;
	int LITERAL_quarter = 301;
	int LITERAL_qq = 302;
	int LITERAL_q = 303;
	int LITERAL_week = 304;
	int LITERAL_wk = 305;
	int LITERAL_w = 306;
	int LITERAL_dayofyear = 307;
	int LITERAL_dy = 308;
	int LITERAL_y = 309;
	int LITERAL_weekday = 310;
	int LITERAL_dw = 311;
	int LITERAL_hour = 312;
	int LITERAL_hh = 313;
	// "hh12" = 314
	// "hh24" = 315
	int LITERAL_minute = 316;
	int LITERAL_mi = 317;
	int LITERAL_n = 318;
	int LITERAL_second = 319;
	int LITERAL_ss = 320;
	int LITERAL_s = 321;
	int LITERAL_millisecond = 322;
	int LITERAL_ms = 323;
	int LITERAL_long = 324;
	int LITERAL_date = 325;
	int LITERAL_rowid = 326;
	int LITERAL_clob = 327;
	int LITERAL_nclob = 328;
	int LITERAL_blob = 329;
	int LITERAL_bfile = 330;
	int DOT_STAR = 331;
	int LEFT_JOIN = 332;
	int PARAM_LPAREN = 333;
	int PARAM_RPAREN = 334;
	int FROM = 335;
	int WS = 336;
	int ESC = 337;
	int ID_START_LETTER = 338;
	int ID_LETTER = 339;
	int NUM = 340;
	int DOT_NUM = 341;
	int NUM_START = 342;
	int NUM_LETTER = 343;
	int ML_COMMENT = 344;
	int COMPARE_OP = 345;
	int TWO_ARG_OP = 346;
	int ONE_ARG_OP = 347;
	// "\u5de6\u8fde\u63a5" = 348
	// "\u6c42\u5b57\u7b26\u4e32\u6700\u5927\u503c" = 349
	// "\u6c42\u5b57\u7b26\u4e32\u6700\u5c0f\u503c" = 350
}
